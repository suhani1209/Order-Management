package com.intuit.ordermanagement.service.order;

import java.math.BigDecimal;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.intuit.ordermanagement.exception.OrderNotFoundException;
import com.intuit.ordermanagement.model.Order;
import com.intuit.ordermanagement.model.OrderItem;
import com.intuit.ordermanagement.repository.OrderItemRepository;
import com.intuit.ordermanagement.repository.OrderRepository;
import com.intuit.ordermanagement.repository.ProductRepository;

import jakarta.transaction.Transactional;

@Service
public class OrderServiceImpl implements OrderService{
	
	@Autowired
	private OrderRepository orderRepository;
	@Autowired
	private ProductRepository productRepository;
	@Autowired
	private OrderItemRepository orderItemRepository;

	@Override
	@Transactional
	public Order createOrder(Order order) {
		System.out.println("I am in OrderServiceImpl");
		BigDecimal totalValue = BigDecimal.ZERO;
		for(OrderItem item: order.getItems()) {
			BigDecimal itemPrice = item.getProduct().getPrice();
			totalValue = totalValue.add(itemPrice.multiply(new BigDecimal(item.getQuantity())));
		}
		order.setTotalOrderValue(totalValue);
		System.out.println("Order to be saved: " + order);
		Order savedOrder = orderRepository.save(order);  // Save the order
		Long orderId = savedOrder.getId();
		System.out.println("Order with ID %s has the following OrderItem IDs: %s%s"+ orderId+savedOrder.getItems().stream().map(OrderItem::getId).collect(Collectors.toList()));

		System.out.println("Saved order: " + savedOrder);

	    // Establish the relationship
	    for (OrderItem orderItem : savedOrder.getItems()) {
	    	System.out.println("I am trying to set Order in OrderItem");
	    	orderItem.setOrder(savedOrder);
	    	orderItemRepository.save(orderItem);
	        //orderItem.setId(orderId);
	    }
	    System.out.println("Final saved Order : "+savedOrder);

	    return savedOrder;
	}

	@Override
	public Order getOrderDetails(Long orderId) {
		return orderRepository.findById(orderId).orElseThrow(()-> new OrderNotFoundException(orderId));
	}

}
