package com.intuit.ordermanagement.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.intuit.ordermanagement.dto.ItemQuantityPair;
import com.intuit.ordermanagement.dto.OrderPayload;
import com.intuit.ordermanagement.exception.ProductNotFoundException;
import com.intuit.ordermanagement.model.Order;
import com.intuit.ordermanagement.model.Product;
import com.intuit.ordermanagement.service.order.OrderService;
import com.intuit.ordermanagement.service.product.ProductService;

@SpringBootTest
@AutoConfigureMockMvc
public class OrderControllerTest {
	@Autowired
    private MockMvc mockMvc;
	@Autowired
    private ProductService productServiceRepo;
	
    @Mock
    private OrderService orderService;
    @Mock
    private ProductService productService;
    

    ObjectMapper mapper = new ObjectMapper();

    @InjectMocks
    private OrderController orderController;

    @Test
    public void testPlaceOrder() throws JsonProcessingException, Exception {
        // Create test data
    	Product product = new Product("Laptop", new BigDecimal(200), "Mackbook");
    	productServiceRepo.createProduct(product);
    	
        List<ItemQuantityPair> items = new ArrayList<>();
        ItemQuantityPair item = new ItemQuantityPair();
        item.setProductId(product.getId());
        item.setQuantity(2);
        items.add(item);
        OrderPayload payload = new OrderPayload(items);

        Order order = new Order(UUID.randomUUID());
        // Mock dependencies
        when(orderService.createOrder(any())).thenReturn(order);

        // Test the controller
        Order response = orderController.placeOrder(payload);

        // Verify results
        mockMvc.perform(post("/api/order")
                .contentType(org.springframework.http.MediaType.APPLICATION_JSON)
                .content(mapper.writeValueAsString(payload)))
                .andExpect(status().isCreated())
                .andExpect(jsonPath("$.totalOrderValue").value(new BigDecimal(400)));
    }
    
    @Test
    public void testGetProductById() {
    	Product testProduct = new Product("Product", new BigDecimal("20.00"), "TestProduct");
    	productServiceRepo.createProduct(testProduct);
    	
    	Product product = productServiceRepo.getProductById(testProduct.getId());
    	
    	assertEquals(testProduct.getId(), product.getId());
    	assertEquals("Product", product.getName());
    	assertEquals("TestProduct", product.getDescription());
    	assertEquals(testProduct.getPrice(), product.getPrice());
    }
    
    @Test
    public void testGetProductByIdIfProductDoesNotExist() {

    	assertThrows(ProductNotFoundException.class, () -> productServiceRepo.getProductById((long) 1));
    }
    
    @Test
    public void testGetAllProducts() {
    	Product testProduct = new Product("Product", new BigDecimal("20.00"), "TestProduct");
    	productServiceRepo.createProduct(testProduct);
    	
    	Product testProduct2 = new Product("Product2", new BigDecimal("20.00"), "TestProduct2");
    	productServiceRepo.createProduct(testProduct2);
    	
    	List<Product> products = productServiceRepo.getAllProducts();
    	
    	assertEquals(2, products.size());
    	assertEquals(products.get(0).getName(), testProduct.getName());
    }
    
    @Test
    public void testGetAllProductsNoProductExists() {
    	List<Product> products = productServiceRepo.getAllProducts();
    	
    	assertEquals(0, products.size());
    }
}

