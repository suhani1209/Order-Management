package com.intuit.ordermanagement.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.math.BigDecimal;
import java.util.List;

import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.intuit.ordermanagement.exception.ProductNotFoundException;
import com.intuit.ordermanagement.model.Product;
import com.intuit.ordermanagement.repository.ProductRepository;
import com.intuit.ordermanagement.service.product.ProductServiceImpl;

@SpringBootTest
public class ProductServiceTest {
	
	@MockBean
    private ProductServiceImpl productService;

    @Test
    public void testGetProductById() {
    	Product testProduct = new Product("Product", new BigDecimal("20.00"), "TestProduct");
    	productService.createProduct(testProduct);
    	
    	Product product = productService.getProductById(testProduct.getId());
    	
    	assertEquals(testProduct.getId(), product.getId());
    	assertEquals("Product", product.getName());
    	assertEquals("TestProduct", product.getDescription());
    	assertEquals(testProduct.getPrice(), product.getPrice());
    }
    
    @Test
    public void testGetProductByIdIfProductNotFound() {
    	long nonExistingProductId = 999L;
    	assertThrows(ProductNotFoundException.class, () -> productService.getProductById(nonExistingProductId));
    }
    
    @Test
    public void testGetAllProducts() {
    	Product testProduct = new Product("Product", new BigDecimal("20.00"), "TestProduct");
    	productService.createProduct(testProduct);
    	
    	Product testProduct2 = new Product("Product2", new BigDecimal("20.00"), "TestProduct2");
    	productService.createProduct(testProduct2);
    	
    	List<Product> products = productService.getAllProducts();
    	
    	assertEquals(3, products.size());
    	assertEquals(products.get(0).getName(), testProduct.getName());
    }
}

