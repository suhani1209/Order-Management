package com.intuit.ordermanagement.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.junit.jupiter.MockitoSettings;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.intuit.ordermanagement.controller.OrderController;
import com.intuit.ordermanagement.dto.ItemQuantityPair;
import com.intuit.ordermanagement.dto.OrderPayload;
import com.intuit.ordermanagement.exception.ProductNotFoundException;
import com.intuit.ordermanagement.model.Order;
import com.intuit.ordermanagement.model.Product;
import com.intuit.ordermanagement.repository.ProductRepository;
import com.intuit.ordermanagement.service.order.OrderService;
import com.intuit.ordermanagement.service.product.ProductService;
import com.intuit.ordermanagement.service.product.ProductServiceImpl;

@SpringBootTest
public class ProductServiceTest {
	@InjectMocks
    private ProductServiceImpl productServiceImpl;
	
	@Mock
	private ProductRepository productRepository;

    @Test
    public void testGetProductById() {
    	Product testProduct = new Product("Product", new BigDecimal("20.00"), "TestProduct");
    	productServiceImpl.createProduct(testProduct);
    	
    	Product product = productServiceImpl.getProductById(testProduct.getId());
    	
    	assertEquals(testProduct.getId(), product.getId());
    	assertEquals("Product", product.getName());
    	assertEquals("TestProduct", product.getDescription());
    	assertEquals(testProduct.getPrice(), product.getPrice());
    }
    
    @Test
    public void testGetProductByIdIfProductNotFound() {
    	long nonExistingProductId = 999L;
    	assertThrows(ProductNotFoundException.class, () -> productServiceImpl.getProductById(nonExistingProductId));
    }
    
    @Test
    public void testGetAllProducts() {
    	Product testProduct = new Product("Product", new BigDecimal("20.00"), "TestProduct");
    	productServiceImpl.createProduct(testProduct);
    	
    	Product testProduct2 = new Product("Product2", new BigDecimal("20.00"), "TestProduct2");
    	productServiceImpl.createProduct(testProduct2);
    	
    	List<Product> products = productServiceImpl.getAllProducts();
    	
    	assertEquals(3, products.size());
    	assertEquals(products.get(0).getName(), testProduct.getName());
    }
}

