package com.intuit.ordermanagement.controller;

import java.math.BigDecimal;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.intuit.ordermanagement.dto.DtoUtil;
import com.intuit.ordermanagement.dto.ItemQuantityPair;
import com.intuit.ordermanagement.dto.OrderPayload;
import com.intuit.ordermanagement.exception.ProductNotFoundException;
import com.intuit.ordermanagement.model.Order;
import com.intuit.ordermanagement.model.OrderItem;
import com.intuit.ordermanagement.model.Product;
import com.intuit.ordermanagement.repository.OrderItemRepository;
import com.intuit.ordermanagement.repository.ProductRepository;
import com.intuit.ordermanagement.service.order.OrderService;

@RestController
@RequestMapping("/api/orders")
public class OrderController {
	
	@Autowired
	private OrderService orderService;
	@Autowired
	private ProductRepository productRepository;
	@Autowired
	private OrderItemRepository orderItemRepository;
	
	@PostMapping
	 public Order placeOrder(@RequestBody OrderPayload payload) {
		List<Product> products = fetchProducts(payload); 
	    Order order = createOrderFromPayload(payload, products);

	    // Establish the Order-OrderItem relationship
	    for (OrderItem item : order.getItems()) {
	        item.setOrder(order); 
	    }

	    return orderService.createOrder(order);
    }
	
	public static Order createOrderFromPayload(OrderPayload payload) {
		Order order = new Order();
	    List<OrderItem> orderItems = payload.getItems().stream()
	            .map(item -> createOrderItem(item)) 
	            .collect(Collectors.toList());

	    order.setItems(orderItems);
	    //System.out.println("Order with ID %s has the following OrderItem IDs: %s"+order.getId()+orderItems.stream().map(OrderItem::getId).collect(Collectors.toList()));
	    return order; 
    }
	
	private OrderItem createOrderItem(ItemQuantityPair item) {
		Product product = productRepository.findById(item.getProductId()).orElseThrow(()->new ProductNotFoundException(item.getProductId()));

        OrderItem orderItem = new OrderItem();
        orderItem.setProduct(product); 
        orderItem.setQuantity(item.getQuantity());
        
        orderItemRepository.save(orderItem);
        
        System.out.println("Created OrderItem with ID: "+orderItem.getId());
        return orderItem;
    }
}
